{
  "api/Defcore.Distributed.Network.html": {
    "href": "api/Defcore.Distributed.Network.html",
    "title": "Namespace Defcore.Distributed.Network | defcore",
    "keywords": "Namespace Defcore.Distributed.Network Classes AbstractReceiver Provides the methods nessesary to be the receiving side of a proxy object. AbstractSender Provides the methods nessesary to be the sending side of a proxy object DataReceivedEventArgs Event arguments class to hold info about the data received. NetworkSendReceive Provides the basic methods and members nessesary for network opperations. Proxy A proxy is a TcpClient wrapper that uses a sending and receiving object to do separte handling of stream input/output. Enums ConnectionType The type connected to the proxy"
  },
  "api/Examples.CodeFragments.html": {
    "href": "api/Examples.CodeFragments.html",
    "title": "Namespace Examples.CodeFragments | defcore",
    "keywords": "Namespace Examples.CodeFragments Classes Foo"
  },
  "api/Examples.Primes.GoldbachSeq.html": {
    "href": "api/Examples.Primes.GoldbachSeq.html",
    "title": "Class GoldbachSeq | defcore",
    "keywords": "Class GoldbachSeq Class to sequentially verify Goldbachs conjecture for each even integer greater than two in the input range and find the largest prime such that p + q = sum where q is prime. in that range. Inheritance System.Object GoldbachSeq Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Examples.Primes Assembly :cs.temp.dll.dll Syntax public class GoldbachSeq Methods Main(String[]) Main method for the GoldbachSeq task Declaration public void Main(string[] args_full) Parameters Type Name Description System.String [] args_full command line args passed to this main lowerbound - an even integer > two upperbound - an even integer >= lowerbound"
  },
  "api/Examples.Primes.html": {
    "href": "api/Examples.Primes.html",
    "title": "Namespace Examples.Primes | defcore",
    "keywords": "Namespace Examples.Primes Classes BigIntegerExtensions Extension Methods for BigInteger GoldbachDis A class to run through a distributed system to verify goldbach's conjecture. See GoldbachSeq GoldbachDis.GoldbachTask A class to represent the task of verifying one set of integers for Goldbach. GoldbachDis.TestTask GoldbachSeq Class to sequentially verify Goldbachs conjecture for each even integer greater than two in the input range and find the largest prime such that p + q = sum where q is prime. in that range."
  },
  "api/Examples.Sorting.SortUtils.html": {
    "href": "api/Examples.Sorting.SortUtils.html",
    "title": "Class SortUtils | defcore",
    "keywords": "Class SortUtils Inheritance System.Object SortUtils Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Examples.Sorting Assembly :cs.temp.dll.dll Syntax public static class SortUtils Methods IsSorted<T>(T[]) Determines if this array is sorted in ascending order. Declaration public static bool IsSorted<T>(this T[] arr)where T : IComparable<T> Parameters Type Name Description T[] arr Returns Type Description System.Boolean True if sorted in ascending order, false otherwise Type Parameters Name Description T Shuffle<T>(T[]) Performs Fisher-Yates Shuffle on this array. Uses shared \"shuffling\" PRNG seeded initially by the time of initialization. Declaration public static void Shuffle<T>(this T[] arr) Parameters Type Name Description T[] arr Type Parameters Name Description T Shuffle<T>(T[], Random) Performs Fisher-Yates Shuffle on this array. Declaration public static void Shuffle<T>(this T[] arr, Random rand) Parameters Type Name Description T[] arr System.Random rand PRNG to use for index selection Type Parameters Name Description T Swap<T>(ref T, ref T) Swaps the values of the two references. Declaration public static void Swap<T>(ref T a, ref T b) Parameters Type Name Description T a First Reference T b Second Reference Type Parameters Name Description T"
  },
  "api/Examples.Sorting.html": {
    "href": "api/Examples.Sorting.html",
    "title": "Namespace Examples.Sorting | defcore",
    "keywords": "Namespace Examples.Sorting Classes InsertionSortExtensions Array Extensions for supporting InsertionSort on any array of Comparables. QuickSortExtensions Array Extensions for supporting QuickSort (both Sequential and Parallel) on any array of Comparables. SortTesting SortUtils"
  },
  "api/StartNode.StartNode.html": {
    "href": "api/StartNode.StartNode.html",
    "title": "Class StartNode | defcore",
    "keywords": "Class StartNode Inheritance System.Object StartNode Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :StartNode Assembly :cs.temp.dll.dll Syntax public class StartNode Methods Main(String[]) Declaration public static void Main(string[] args) Parameters Type Name Description System.String [] args"
  },
  "api/StartNode.html": {
    "href": "api/StartNode.html",
    "title": "Namespace StartNode | defcore",
    "keywords": "Namespace StartNode Classes StartNode"
  },
  "api/Defcore.Distributed.Assembly.html": {
    "href": "api/Defcore.Distributed.Assembly.html",
    "title": "Namespace Defcore.Distributed.Assembly | defcore",
    "keywords": "Namespace Defcore.Distributed.Assembly Classes CoreLoader<T> CoreLoader loads an assembly and creates an instance from which to call methods based on the generic type T."
  },
  "api/Defcore.Distributed.IO.FileWrite.html": {
    "href": "api/Defcore.Distributed.IO.FileWrite.html",
    "title": "Class FileWrite | defcore",
    "keywords": "Class FileWrite Static class to handle File Writing Inheritance System.Object FileWrite Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Defcore.Distributed.IO Assembly :cs.temp.dll.dll Syntax public static class FileWrite Methods WriteOut(NetworkStream, String) Write a file out to the given network stream Declaration public static void WriteOut(NetworkStream iostream, string filepath) Parameters Type Name Description NetworkStream iostream the network stream to write to System.String filepath the file to be written"
  },
  "api/Defcore.Distributed.Jobs.Schedule.html": {
    "href": "api/Defcore.Distributed.Jobs.Schedule.html",
    "title": "Enum Schedule | defcore",
    "keywords": "Enum Schedule The schedule to execute their jobs Namespace :Defcore.Distributed.Jobs Assembly :cs.temp.dll.dll Syntax public enum Schedule Fields Name Description Fixed Leapfrog"
  },
  "api/Defcore.Distributed.Manager.JobRef.html": {
    "href": "api/Defcore.Distributed.Manager.JobRef.html",
    "title": "Class JobRef | defcore",
    "keywords": "Class JobRef A reference to a job, contains all the information related to a job object. Inheritance System.Object JobRef Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Defcore.Distributed.Manager Assembly :cs.temp.dll.dll Syntax public class JobRef Fields ProxyId The proxy id Declaration public int ProxyId Field Value Type Description System.Int32 Properties JobId The job id Declaration public int JobId { get; set; } Property Value Type Description System.Int32 PathToDll The full path to the users assembly on their system Declaration public string PathToDll { get; set; } Property Value Type Description System.String RequestedNodes How many nodes did the user program request Declaration public int RequestedNodes { get; set; } Property Value Type Description System.Int32 SectionId The section id for the node executing some section of work. Set before runtime Declaration public int SectionId { get; set; } Property Value Type Description System.Int32 TotalNodes The total nodes in use for this job. Set before runtime. Declaration public int TotalNodes { get; set; } Property Value Type Description System.Int32 UserArgs The users command line arguments to their program Declaration public string[] UserArgs { get; set; } Property Value Type Description System.String [] Username The username associated with the job Declaration public string Username { get; set; } Property Value Type Description System.String Methods ToString() Overridden to string method Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Defcore.Distributed.Network.ConnectionType.html": {
    "href": "api/Defcore.Distributed.Network.ConnectionType.html",
    "title": "Enum ConnectionType | defcore",
    "keywords": "Enum ConnectionType The type connected to the proxy Namespace :Defcore.Distributed.Network Assembly :cs.temp.dll.dll Syntax public enum ConnectionType Fields Name Description Default Job Node Query"
  },
  "api/defcore.Program.html": {
    "href": "api/defcore.Program.html",
    "title": "Class Program | defcore",
    "keywords": "Class Program Inheritance System.Object Program Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :defcore Assembly :cs.temp.dll.dll Syntax public class Program Methods Main(String[]) Declaration public static void Main(string[] args) Parameters Type Name Description System.String [] args"
  },
  "api/Examples.Primes.BigIntegerExtensions.html": {
    "href": "api/Examples.Primes.BigIntegerExtensions.html",
    "title": "Class BigIntegerExtensions | defcore",
    "keywords": "Class BigIntegerExtensions Extension Methods for BigInteger Inheritance System.Object BigIntegerExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Examples.Primes Assembly :cs.temp.dll.dll Syntax public static class BigIntegerExtensions Methods BitCount(BigInteger) Counts the number of bits in a big integer Declaration public static int BitCount(this BigInteger number) Parameters Type Name Description BigInteger number number to count Returns Type Description System.Int32 IsProbablePrime(BigInteger, Int32) Millar-Rabin test for probabilistic prime Based on java's implementation http://developer.classpath.org/doc/java/math/BigInteger-source.html which in turn is based on \"The Rabin-Miller algorithm pp. 259-261 of \"Applied Cryptography, Second Edition\" by Bruce Schneier. Declaration public static bool IsProbablePrime(this BigInteger thisBigInt, int certainty) Parameters Type Name Description BigInteger thisBigInt System.Int32 certainty Returns Type Description System.Boolean NextProbablePrime(BigInteger) Finds the next probably prime Declaration public static BigInteger NextProbablePrime(this BigInteger number) Parameters Type Name Description BigInteger number Returns Type Description BigInteger"
  },
  "api/SubmitJob.SubmitJob.html": {
    "href": "api/SubmitJob.SubmitJob.html",
    "title": "Class SubmitJob | defcore",
    "keywords": "Class SubmitJob Inheritance System.Object SubmitJob Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :SubmitJob Assembly :cs.temp.dll.dll Syntax public class SubmitJob Methods Main(String[]) Declaration public static void Main(string[] args) Parameters Type Name Description System.String [] args"
  },
  "api/SubmitJob.html": {
    "href": "api/SubmitJob.html",
    "title": "Namespace SubmitJob | defcore",
    "keywords": "Namespace SubmitJob Classes SubmitJob"
  },
  "api/Defcore.Distributed.Assembly.CoreLoader.html": {
    "href": "api/Defcore.Distributed.Assembly.CoreLoader.html",
    "title": "Class CoreLoader | defcore",
    "keywords": "Class CoreLoader Inheritance System.Object CoreLoader Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Defcore.Distributed.Assembly Assembly :cs.temp.dll.dll Syntax public class CoreLoader Constructors CoreLoader(String) Constructor for the CoreLoader Declaration public CoreLoader(string assemblyPath) Parameters Type Name Description System.String assemblyPath path to the assembly (dll) Methods CallMethod(String, Object[]) Call a method with the specified params for an object of the Job Class Declaration public object CallMethod(string method, object[] methodParams) Parameters Type Name Description System.String method System.Object [] methodParams Returns Type Description System.Object FindJobClass() Find a job class from an assembly, if that job class does not exist in the assembly return false. Declaration public bool FindJobClass() Returns Type Description System.Boolean"
  },
  "api/Defcore.Distributed.IO.JobTextWriter.html": {
    "href": "api/Defcore.Distributed.IO.JobTextWriter.html",
    "title": "Class JobTextWriter | defcore",
    "keywords": "Class JobTextWriter JobTextWriter writes output to a custom class and provides the ability to serialzes that object afterwards. This class is used in conjunction with JobExecuter to save all user output from a job before converting it to json and writing it back out to the process executing JobExecuters main. Inheritance System.Object System.MarshalByRefObject System.IO.TextWriter JobTextWriter Inherited Members System.IO.TextWriter.Null System.IO.TextWriter.CoreNewLine System.IO.TextWriter.Close() System.IO.TextWriter.Dispose(System.Boolean) System.IO.TextWriter.Dispose() System.IO.TextWriter.Flush() System.IO.TextWriter.Synchronized(System.IO.TextWriter) System.IO.TextWriter.Write(System.Char[]) System.IO.TextWriter.Write(System.Char[], System.Int32, System.Int32) System.IO.TextWriter.Write(System.Boolean) System.IO.TextWriter.Write(System.Int32) System.IO.TextWriter.Write(System.UInt32) System.IO.TextWriter.Write(System.Int64) System.IO.TextWriter.Write(System.UInt64) System.IO.TextWriter.Write(System.Single) System.IO.TextWriter.Write(System.Double) System.IO.TextWriter.Write(System.Decimal) System.IO.TextWriter.Write(System.String) System.IO.TextWriter.Write(System.Object) System.IO.TextWriter.Write(System.String, System.Object) System.IO.TextWriter.Write(System.String, System.Object, System.Object) System.IO.TextWriter.Write(System.String, System.Object, System.Object, System.Object) System.IO.TextWriter.Write(System.String, System.Object[]) System.IO.TextWriter.WriteLine() System.IO.TextWriter.WriteLine(System.Char) System.IO.TextWriter.WriteLine(System.Char[]) System.IO.TextWriter.WriteLine(System.Char[], System.Int32, System.Int32) System.IO.TextWriter.WriteLine(System.Boolean) System.IO.TextWriter.WriteLine(System.Int32) System.IO.TextWriter.WriteLine(System.UInt32) System.IO.TextWriter.WriteLine(System.Int64) System.IO.TextWriter.WriteLine(System.UInt64) System.IO.TextWriter.WriteLine(System.Single) System.IO.TextWriter.WriteLine(System.Double) System.IO.TextWriter.WriteLine(System.Decimal) System.IO.TextWriter.WriteLine(System.String) System.IO.TextWriter.WriteLine(System.Object) System.IO.TextWriter.WriteLine(System.String, System.Object) System.IO.TextWriter.WriteLine(System.String, System.Object, System.Object) System.IO.TextWriter.WriteLine(System.String, System.Object, System.Object, System.Object) System.IO.TextWriter.WriteLine(System.String, System.Object[]) System.IO.TextWriter.WriteAsync(System.Char) System.IO.TextWriter.WriteAsync(System.String) System.IO.TextWriter.WriteAsync(System.Char[]) System.IO.TextWriter.WriteAsync(System.Char[], System.Int32, System.Int32) System.IO.TextWriter.WriteLineAsync(System.Char) System.IO.TextWriter.WriteLineAsync(System.String) System.IO.TextWriter.WriteLineAsync(System.Char[]) System.IO.TextWriter.WriteLineAsync(System.Char[], System.Int32, System.Int32) System.IO.TextWriter.WriteLineAsync() System.IO.TextWriter.FlushAsync() System.IO.TextWriter.FormatProvider System.IO.TextWriter.NewLine System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.CreateObjRef(System.Type) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Defcore.Distributed.IO Assembly :cs.temp.dll.dll Syntax public class JobTextWriter : TextWriter, IDisposable Constructors JobTextWriter() Initializes the UserOutput object Declaration public JobTextWriter() Properties Encoding Encode with ASCII Declaration public override Encoding Encoding { get; } Property Value Type Description Encoding Overrides System.IO.TextWriter.Encoding Methods GetJsonResult() Get the results as a json string. Declaration public string GetJsonResult() Returns Type Description System.String GetSimpleString() Get the results as a simple string Declaration public string GetSimpleString() Returns Type Description System.String Write(Char) Write a char value to the UserOutput object. All methods in a textwriter use at the basic level Write(char value). This is the only method that needs to be overridden. Declaration public override void Write(char value) Parameters Type Name Description System.Char value the character value to be written Overrides System.IO.TextWriter.Write(System.Char)"
  },
  "api/Defcore.Distributed.Jobs.Job.html": {
    "href": "api/Defcore.Distributed.Jobs.Job.html",
    "title": "Class Job | defcore",
    "keywords": "Class Job The abstract class that allows a user program to operate within the distributed system setup by defcore. Users must extend this class within their program exactly once. Inheritance System.Object Job Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Defcore.Distributed.Jobs Assembly :cs.temp.dll.dll Syntax public abstract class Job Constructors Job() Empty constructor for a job Declaration protected Job() Fields TaskSchedule Declaration protected Schedule TaskSchedule Field Value Type Description Schedule Properties RequestedNodes The number of nodes a user wishes to request for their program This number will default to the total number of nodes present if too large a number is provided. Defaults to 1. Declaration public int RequestedNodes { get; set; } Property Value Type Description System.Int32 Results Declaration public List<JobResult> Results { get; } Property Value Type Description System.Collections.Generic.List < JobResult > Methods AddResult(JobResult) Add a JobResult to the list of results Declaration public void AddResult(JobResult result) Parameters Type Name Description JobResult result The job result AddTask(JobTask) Add a JobTask to the list to be executed. Declaration public void AddTask(JobTask task) Parameters Type Name Description JobTask task The jobtask to add CompileResults() Add all the results from a task to this Jobs result list. Declaration public void CompileResults() GetClassName() Get the actual class name of this class. Declaration public string GetClassName() Returns Type Description System.String GetNumberTasks() Get the nuber of tasks setup Declaration public int GetNumberTasks() Returns Type Description System.Int32 GetSchedule() Get the task execution schedule Declaration public Schedule GetSchedule() Returns Type Description Schedule Main(String[]) The main program to be run to setup some number of task programs. It is advised that large computations are not executed within here but rather the job task objects. Declaration public abstract void Main(string[] args) Parameters Type Name Description System.String [] args RunFinalTask() Run a final task at the end, on the node that submitted the job. Declaration public virtual void RunFinalTask() Remarks This method will be called once all nodes have finished and will be run on the node that submitted the job. RunOnce() Run a section of code on exactly one node Declaration public virtual void RunOnce() Remarks This method will be called once by only one node StartTask(Int32) Start a job task at the given index Declaration public void StartTask(int index) Parameters Type Name Description System.Int32 index index of the jobtask within the list of tasks"
  },
  "api/Defcore.Distributed.Jobs.html": {
    "href": "api/Defcore.Distributed.Jobs.html",
    "title": "Namespace Defcore.Distributed.Jobs | defcore",
    "keywords": "Namespace Defcore.Distributed.Jobs Classes Job The abstract class that allows a user program to operate within the distributed system setup by defcore. Users must extend this class within their program exactly once. JobResult A class to represent a result from a job JobTask A JobTask is a unit of work performed on some node JobTasks are setup by a job and then executed on some number of nodes based on Job schedule. Enums Schedule The schedule to execute their jobs"
  },
  "api/Defcore.Distributed.Logging.html": {
    "href": "api/Defcore.Distributed.Logging.html",
    "title": "Namespace Defcore.Distributed.Logging | defcore",
    "keywords": "Namespace Defcore.Distributed.Logging Classes Logger Class to handle logging, Logger is a singleton"
  },
  "api/Defcore.Distributed.Network.AbstractSender.html": {
    "href": "api/Defcore.Distributed.Network.AbstractSender.html",
    "title": "Class AbstractSender | defcore",
    "keywords": "Class AbstractSender Provides the methods nessesary to be the sending side of a proxy object Inheritance System.Object NetworkSendReceive AbstractSender Inherited Members NetworkSendReceive.BufferSize NetworkSendReceive.ServerPort NetworkSendReceive.IOSleep NetworkSendReceive.ServerSleep NetworkSendReceive.Thread NetworkSendReceive.Proxy NetworkSendReceive.Run() NetworkSendReceive.Start() NetworkSendReceive.Shutdown() NetworkSendReceive.Join() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Defcore.Distributed.Network Assembly :cs.temp.dll.dll Syntax public abstract class AbstractSender : NetworkSendReceive Fields DoneSending Declaration protected bool DoneSending Field Value Type Description System.Boolean Methods HandleReceiverEvent(Object, DataReceivedEventArgs) Handle the nessesary communication in response to data received from the socket. Declaration public abstract void HandleReceiverEvent(object sender, DataReceivedEventArgs e) Parameters Type Name Description System.Object sender event raiser DataReceivedEventArgs e data from receive event SendMessage(String[]) Format and send a message from an array of string arguments. Declaration public virtual void SendMessage(string[] args) Parameters Type Name Description System.String [] args the message to send"
  },
  "api/Defcore.Distributed.Network.Proxy.html": {
    "href": "api/Defcore.Distributed.Network.Proxy.html",
    "title": "Class Proxy | defcore",
    "keywords": "Class Proxy A proxy is a TcpClient wrapper that uses a sending and receiving object to do separte handling of stream input/output. Inheritance System.Object Proxy Inherited Members System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace :Defcore.Distributed.Network Assembly :cs.temp.dll.dll Syntax public class Proxy Constructors Proxy(AbstractReceiver, AbstractSender, String, Int32, Int32) A Proxy constructor that takes in the string and port name to create a Tcp connection. Declaration public Proxy(AbstractReceiver r, AbstractSender s, string host, int port, int id) Parameters Type Name Description AbstractReceiver r An Abstract Receiver AbstractSender s An Abstract Sender System.String host host name for tcp System.Int32 port port number for tcp System.Int32 id the id of the proxy Proxy(AbstractReceiver, AbstractSender, TcpClient, Int32) A Proxy constructor that can be passed an already initalized TcpClient. Declaration public Proxy(AbstractReceiver r, AbstractSender s, TcpClient client, int id) Parameters Type Name Description AbstractReceiver r An Abstract Receiver AbstractSender s An Abstract Sender TcpClient client An initalized TcpClient System.Int32 id the id of the proxy Properties Connection Declaration public ConnectionType Connection { get; set; } Property Value Type Description ConnectionType Id Declaration public int Id { get; } Property Value Type Description System.Int32 IOStream Declaration public NetworkStream IOStream { get; } Property Value Type Description NetworkStream Methods Equals(Object) Override equals for Proxy two proxy objects are equal if their id's are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) GetHashCode() Override hashcode for Proxy Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Remarks two objects must hash to the same thing if they are equal. HandOffSendReceive(AbstractReceiver, AbstractSender, ConnectionType) Hand off the sender and receiver to a new sender and receiver object. Declaration public void HandOffSendReceive(AbstractReceiver r, AbstractSender s, ConnectionType c) Parameters Type Name Description AbstractReceiver r new receiver AbstractSender s new sender ConnectionType c the connection type Join() Join on both send and receive threads. Declaration public void Join() Remarks Nicely wait for both threads in the proxy to finish. This is used for clean up. QueueDataEvent(DataReceivedEventArgs) Queue a data event for the receiver without receiving it directly from the socket. Declaration public void QueueDataEvent(DataReceivedEventArgs d) Parameters Type Name Description DataReceivedEventArgs d the data to queue Shutdown() Shutdown the TcpClient and the underlying tcp connection. Declaration public void Shutdown()"
  },
  "api/Examples.CodeFragments.Foo.html": {
    "href": "api/Examples.CodeFragments.Foo.html",
    "title": "Class Foo | defcore",
    "keywords": "Class Foo Inheritance System.Object Foo Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Examples.CodeFragments Assembly :cs.temp.dll.dll Syntax public class Foo Properties MyIntegerProperty Declaration public int MyIntegerProperty { get; set; } Property Value Type Description System.Int32 Methods MyLessSimpleMethod(Int32, String, Double) Declaration public string MyLessSimpleMethod(int arg1, string arg2, double arg3) Parameters Type Name Description System.Int32 arg1 System.String arg2 System.Double arg3 Returns Type Description System.String MySimpleMethod() Declaration public void MySimpleMethod()"
  },
  "api/Examples.Primes.GoldbachDis.TestTask.html": {
    "href": "api/Examples.Primes.GoldbachDis.TestTask.html",
    "title": "Class GoldbachDis.TestTask | defcore",
    "keywords": "Class GoldbachDis.TestTask Inheritance System.Object GoldbachDis.TestTask Namespace :Examples.Primes Assembly :cs.temp.dll.dll Syntax public class TestTask : JobResult Constructors TestTask(Int32) Declaration public TestTask(int id) Parameters Type Name Description System.Int32 id Properties Hello Declaration public int Hello { get; set; } Property Value Type Description System.Int32 Methods doSomething() Declaration public void doSomething()"
  },
  "api/Examples.Primes.GoldbachDis.html": {
    "href": "api/Examples.Primes.GoldbachDis.html",
    "title": "Class GoldbachDis | defcore",
    "keywords": "Class GoldbachDis A class to run through a distributed system to verify goldbach's conjecture. See GoldbachSeq Inheritance System.Object GoldbachDis Namespace :Examples.Primes Assembly :cs.temp.dll.dll Syntax public class GoldbachDis : Job Methods Main(String[]) Overridden non-static Main Declaration public override void Main(string[] args_full) Parameters Type Name Description System.String [] args_full RunFinalTask() Declaration public override void RunFinalTask()"
  },
  "api/Examples.Sorting.QuickSortSeq.html": {
    "href": "api/Examples.Sorting.QuickSortSeq.html",
    "title": "Class QuickSortSeq | defcore",
    "keywords": "Class QuickSortSeq Inheritance System.Object QuickSortSeq Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Examples.Sorting Assembly :cs.temp.dll.dll Syntax public static class QuickSortSeq"
  },
  "api/Examples.Sorting.SortTesting.html": {
    "href": "api/Examples.Sorting.SortTesting.html",
    "title": "Class SortTesting | defcore",
    "keywords": "Class SortTesting Inheritance System.Object SortTesting Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Examples.Sorting Assembly :cs.temp.dll.dll Syntax public class SortTesting Methods GenerateRandomInts(Int32) Declaration public static void GenerateRandomInts(int num) Parameters Type Name Description System.Int32 num Main2(String[]) Declaration public static void Main2(string[] args) Parameters Type Name Description System.String [] args"
  },
  "api/StartManager.Test.html": {
    "href": "api/StartManager.Test.html",
    "title": "Class Test | defcore",
    "keywords": "Class Test Inheritance System.Object Test Namespace :StartManager Assembly :cs.temp.dll.dll Syntax public class Test : JobResult Constructors Test(Int32) Declaration public Test(int id) Parameters Type Name Description System.Int32 id Fields s Declaration public string s Field Value Type Description System.String"
  },
  "api/Examples.Program.html": {
    "href": "api/Examples.Program.html",
    "title": "Class Program | defcore",
    "keywords": "Class Program Inheritance System.Object Program Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Examples Assembly :cs.temp.dll.dll Syntax public class Program Methods Main(String[]) Declaration public static void Main(string[] args) Parameters Type Name Description System.String [] args"
  },
  "api/Loader.html": {
    "href": "api/Loader.html",
    "title": "Namespace Loader | defcore",
    "keywords": "Namespace Loader Classes Loader Class to load a user program in and run it."
  },
  "api/StartManager.StartManager.html": {
    "href": "api/StartManager.StartManager.html",
    "title": "Class StartManager | defcore",
    "keywords": "Class StartManager Inheritance System.Object StartManager Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :StartManager Assembly :cs.temp.dll.dll Syntax public class StartManager Methods Main(String[]) Declaration public static void Main(string[] args) Parameters Type Name Description System.String [] args"
  },
  "api/Defcore.Distributed.Assembly.CoreLoader-1.html": {
    "href": "api/Defcore.Distributed.Assembly.CoreLoader-1.html",
    "title": "Class CoreLoader<T> | defcore",
    "keywords": "Class CoreLoader<T> CoreLoader loads an assembly and creates an instance from which to call methods based on the generic type T. Inheritance System.Object CoreLoader<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Defcore.Distributed.Assembly Assembly :cs.temp.dll.dll Syntax public class CoreLoader<T> Type Parameters Name Description T The type to create an instance for Constructors CoreLoader(String) Create and load the assembly with the given path Declaration public CoreLoader(string assemblyPath) Parameters Type Name Description System.String assemblyPath Full path to the assembly (dll) Remarks The full path to the assembly must be provided Exceptions Type Condition System.TypeLoadException Thrown if the generic type could not be found Methods CallMethod(String, Object[]) Call a method with the specified params for an object of the generic class Declaration public object CallMethod(string method, object[] methodParams) Parameters Type Name Description System.String method the method name System.Object [] methodParams an array of object which contains that methods arguments parameters Returns Type Description System.Object GetProperty(String) Get a property from the generic object Declaration public object GetProperty(string property) Parameters Type Name Description System.String property the properties name Returns Type Description System.Object the property as an object"
  },
  "api/Defcore.Distributed.IO.UserOutput.html": {
    "href": "api/Defcore.Distributed.IO.UserOutput.html",
    "title": "Class UserOutput | defcore",
    "keywords": "Class UserOutput Small class wrapped around user output Inheritance System.Object UserOutput Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Defcore.Distributed.IO Assembly :cs.temp.dll.dll Syntax public sealed class UserOutput Properties ConsoleOutput Declaration public string ConsoleOutput { get; set; } Property Value Type Description System.String"
  },
  "api/Defcore.Distributed.Jobs.JobResult.html": {
    "href": "api/Defcore.Distributed.Jobs.JobResult.html",
    "title": "Class JobResult | defcore",
    "keywords": "Class JobResult A class to represent a result from a job Inheritance System.Object JobResult Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Defcore.Distributed.Jobs Assembly :cs.temp.dll.dll Syntax public class JobResult Properties JobId Declaration public int JobId { get; set; } Property Value Type Description System.Int32 Methods DeserializeString(String) Deserialize the output string into a JobResult object Declaration public static JobResult DeserializeString(string input) Parameters Type Name Description System.String input Returns Type Description JobResult SerializeResult() Declaration public string SerializeResult() Returns Type Description System.String"
  },
  "api/Defcore.Distributed.Logging.Logger.html": {
    "href": "api/Defcore.Distributed.Logging.Logger.html",
    "title": "Class Logger | defcore",
    "keywords": "Class Logger Class to handle logging, Logger is a singleton Inheritance System.Object Logger Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Defcore.Distributed.Logging Assembly :cs.temp.dll.dll Syntax public sealed class Logger Fields LogFileName Name of the log file Declaration public static string LogFileName Field Value Type Description System.String Remarks Only one instance can be used per program LogFor Who to log for, can be used once per logger creation Declaration public static string LogFor Field Value Type Description System.String Remarks Used at start and not after Properties ManagerLogInstance Accesser for the Manager logger instance Declaration public static Logger ManagerLogInstance { get; } Property Value Type Description Logger Remarks Whichever property gets called first is what the Logger instance will be. since a Node and NodeManager are not running the same instance this will not be an issue. NodeLogInstance Accesser for the logger instance Declaration public static Logger NodeLogInstance { get; } Property Value Type Description Logger Remarks Whichever property gets called first is what the Logger instance will be. since a Node and NodeManager are not running the same instance this will not be an issue. Methods Log(String) Logger a message to the text file Declaration public void Log(string logMessage) Parameters Type Name Description System.String logMessage Remarks Print to console if in debug"
  },
  "api/Defcore.Distributed.Manager.html": {
    "href": "api/Defcore.Distributed.Manager.html",
    "title": "Namespace Defcore.Distributed.Manager | defcore",
    "keywords": "Namespace Defcore.Distributed.Manager Classes JobRef A reference to a job, contains all the information related to a job object."
  },
  "api/Defcore.Distributed.Network.NetworkSendReceive.html": {
    "href": "api/Defcore.Distributed.Network.NetworkSendReceive.html",
    "title": "Class NetworkSendReceive | defcore",
    "keywords": "Class NetworkSendReceive Provides the basic methods and members nessesary for network opperations. Inheritance System.Object NetworkSendReceive AbstractReceiver AbstractSender Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Defcore.Distributed.Network Assembly :cs.temp.dll.dll Syntax public abstract class NetworkSendReceive Fields BufferSize Declaration public const int BufferSize = 1024 Field Value Type Description System.Int32 IOSleep Declaration public const int IOSleep = 100 Field Value Type Description System.Int32 ServerPort Declaration public const int ServerPort = 12345 Field Value Type Description System.Int32 ServerSleep Declaration public const int ServerSleep = 500 Field Value Type Description System.Int32 Thread Declaration protected Thread Thread Field Value Type Description Thread Properties Proxy Declaration public Proxy Proxy { protected get; set; } Property Value Type Description Proxy Methods Join() Join on this thread. Declaration public virtual void Join() Run() Where the actual sending/receiving happens Declaration public abstract void Run() Shutdown() Shutdown the connection to the socket Declaration public virtual void Shutdown() Start() Start up the given sender/receiver in its own thread so that it can begin sending/receiving data. Declaration public virtual void Start()"
  },
  "api/defcore.html": {
    "href": "api/defcore.html",
    "title": "Namespace defcore | defcore",
    "keywords": "Namespace defcore Classes Program"
  },
  "api/Examples.Primes.GoldbachDis.GoldbachTask.html": {
    "href": "api/Examples.Primes.GoldbachDis.GoldbachTask.html",
    "title": "Class GoldbachDis.GoldbachTask | defcore",
    "keywords": "Class GoldbachDis.GoldbachTask A class to represent the task of verifying one set of integers for Goldbach. Inheritance System.Object GoldbachDis.GoldbachTask Namespace :Examples.Primes Assembly :cs.temp.dll.dll Syntax public class GoldbachTask : JobTask Constructors GoldbachTask(String[]) Constructor for the Goldbach Task Declaration public GoldbachTask(string[] args) Parameters Type Name Description System.String [] args Methods Main(String[]) Main method for the GoldbachSeq task Declaration public override void Main(string[] args2) Parameters Type Name Description System.String [] args2"
  },
  "api/Examples.Sorting.InsertionSortExtensions.html": {
    "href": "api/Examples.Sorting.InsertionSortExtensions.html",
    "title": "Class InsertionSortExtensions | defcore",
    "keywords": "Class InsertionSortExtensions Array Extensions for supporting InsertionSort on any array of Comparables. Inheritance System.Object InsertionSortExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Examples.Sorting Assembly :cs.temp.dll.dll Syntax public static class InsertionSortExtensions Methods InsertionSort<T>(T[]) Declaration public static void InsertionSort<T>(this T[] arr)where T : IComparable<T> Parameters Type Name Description T[] arr Type Parameters Name Description T InsertionSort<T>(T[], Int32, Int32) Declaration public static void InsertionSort<T>(this T[] arr, int start, int end)where T : IComparable<T> Parameters Type Name Description T[] arr System.Int32 start System.Int32 end Type Parameters Name Description T"
  },
  "api/Examples.Sorting.QuickSortExtensions.html": {
    "href": "api/Examples.Sorting.QuickSortExtensions.html",
    "title": "Class QuickSortExtensions | defcore",
    "keywords": "Class QuickSortExtensions Array Extensions for supporting QuickSort (both Sequential and Parallel) on any array of Comparables. Inheritance System.Object QuickSortExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Examples.Sorting Assembly :cs.temp.dll.dll Syntax public static class QuickSortExtensions Methods QuicksortParallel<T>(T[]) Declaration public static void QuicksortParallel<T>(this T[] arr)where T : IComparable<T> Parameters Type Name Description T[] arr Type Parameters Name Description T QuicksortParallel<T>(T[], Int32, Int32) Declaration public static void QuicksortParallel<T>(this T[] arr, int start, int end)where T : IComparable<T> Parameters Type Name Description T[] arr System.Int32 start System.Int32 end Type Parameters Name Description T QuicksortSequential<T>(T[]) Declaration public static void QuicksortSequential<T>(this T[] arr)where T : IComparable<T> Parameters Type Name Description T[] arr Type Parameters Name Description T QuicksortSequential<T>(T[], Int32, Int32) Declaration public static void QuicksortSequential<T>(this T[] arr, int start, int end)where T : IComparable<T> Parameters Type Name Description T[] arr System.Int32 start System.Int32 end Type Parameters Name Description T"
  },
  "api/Examples.html": {
    "href": "api/Examples.html",
    "title": "Namespace Examples | defcore",
    "keywords": "Namespace Examples Classes Program"
  },
  "api/Loader.Loader.html": {
    "href": "api/Loader.Loader.html",
    "title": "Class Loader | defcore",
    "keywords": "Class Loader Class to load a user program in and run it. Inheritance System.Object Loader Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Loader Assembly :cs.temp.dll.dll Syntax public class Loader Methods Main(String[]) Declaration public static void Main(string[] args) Parameters Type Name Description System.String [] args"
  },
  "index.html": {
    "href": "index.html",
    "title": "defcore | defcore",
    "keywords": "defcore Masters Project A distributed environment and framework for .NET Core applications The Distributed Environment and Framework Library (DEFLib) contains enviromental code for deploying applications in a distributed nature along with a framework for writing distributed programs. All code is built against .NET Core 1.1 Separate projects are used for each target, src resides in the framework projects with both _Core projects compiling against them. Building .NET Core Projects After checking out, run \"dotnet restore\" in each of the following projects: Loader, PDLib_Core, StartManager, StartNode and SubmitJob Then run \"dotnet build\" in any of the projects to run it, this will build the library if it has not been built yet. Start the NodeManager first ('dotnet run' in that project), record the IP address for use with Nodes. Start each Node. Submit a dll to be run, note: submit a job on the same system that the manager is running on so it can find the proper file."
  },
  "articles/dist_sys_setup.html": {
    "href": "articles/dist_sys_setup.html",
    "title": "Working on it... come back later | defcore",
    "keywords": "Working on it... come back later"
  },
  "articles/getting_started.html": {
    "href": "articles/getting_started.html",
    "title": "Basics | defcore",
    "keywords": "Basics At its core the simplest way to create a distributed program is to create a class that inherits from job, and then create a second program that inherits from task. public class Foo : Job { public override void Main(string[] args) { foreach (string s in args) { // do some setup ... // create new tasks AddTask(new Bar(...)); } } public class Bar : JobTask { public override void Main(string[] args) { // do some computational complex tasks // prime factorization or something ... } } inside the job program add some number of job tasks to be executed by different nodes."
  },
  "articles/core_loader.html": {
    "href": "articles/core_loader.html",
    "title": "Core Loader | defcore",
    "keywords": "Core Loader For documentation see Core Loader The CoreLoader class allows you to load up and initialize a class from an assembly (dll) and call methods and properties out of that class. Say you had a class Foo that looked like public class Foo { public int MyIntegerProperty { get; set; } public void MySimpleMethod() { Console.WriteLine(\"Simple enough\"); } public string MyLessSimpleMethod(int arg1, string arg2, double arg3) { return arg2 + arg1 + arg3; } } Using Core Loader you could call methods and properties out of that class. public static void Main(string[] args) { CoreLoader<Foo> foo = new CoreLoader<Foo>(\"PathToDllContainingFoo\"); int x = (int)foo.GetProperty(\"MyIntegerProperty\"); foo.CallMethod(\"MySimpleMethod\", new object[] {}); var result = (string) foo.CallMethod( \"MyLessSimpleMethod\", new object[] {1, \"hello\", 3.4}); } The Core Loader is how the defcore system calls methods out of a Job class."
  },
  "api/Defcore.Distributed.IO.FileRead.html": {
    "href": "api/Defcore.Distributed.IO.FileRead.html",
    "title": "Class FileRead | defcore",
    "keywords": "Class FileRead Static class to handle File Reading Inheritance System.Object FileRead Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Defcore.Distributed.IO Assembly :cs.temp.dll.dll Syntax public static class FileRead Fields BufferSize Declaration public const int BufferSize = 1024 Field Value Type Description System.Int32 NetworkSleep Declaration public const int NetworkSleep = 100 Field Value Type Description System.Int32 ReadTimeout Declaration public const int ReadTimeout = 250 Field Value Type Description System.Int32 Methods ReadInWriteOut(NetworkStream, String) Read in a file from a Network Stream and write that file out. Declaration public static void ReadInWriteOut(NetworkStream iostream, string filepath) Parameters Type Name Description NetworkStream iostream Stream to read in from System.String filepath path to write the resulting file"
  },
  "api/Defcore.Distributed.IO.html": {
    "href": "api/Defcore.Distributed.IO.html",
    "title": "Namespace Defcore.Distributed.IO | defcore",
    "keywords": "Namespace Defcore.Distributed.IO Classes FileRead Static class to handle File Reading FileWrite Static class to handle File Writing JobTextWriter JobTextWriter writes output to a custom class and provides the ability to serialzes that object afterwards. This class is used in conjunction with JobExecuter to save all user output from a job before converting it to json and writing it back out to the process executing JobExecuters main. UserOutput Small class wrapped around user output"
  },
  "api/Defcore.Distributed.Jobs.JobTask.html": {
    "href": "api/Defcore.Distributed.Jobs.JobTask.html",
    "title": "Class JobTask | defcore",
    "keywords": "Class JobTask A JobTask is a unit of work performed on some node JobTasks are setup by a job and then executed on some number of nodes based on Job schedule. Inheritance System.Object JobTask Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Defcore.Distributed.Jobs Assembly :cs.temp.dll.dll Syntax public abstract class JobTask Constructors JobTask() Empty constructor, initializes job result list Declaration protected JobTask() Properties TaskResults The tasks list of results Declaration public List<JobResult> TaskResults { get; } Property Value Type Description System.Collections.Generic.List < JobResult > Methods AddResult(JobResult) Add a result Declaration public void AddResult(JobResult j) Parameters Type Name Description JobResult j Main(String[]) Main method is what is called out of each task when the job executes. Declaration public abstract void Main(string[] args) Parameters Type Name Description System.String [] args"
  },
  "api/Defcore.Distributed.Logging.Logger.LogType.html": {
    "href": "api/Defcore.Distributed.Logging.Logger.LogType.html",
    "title": "Enum Logger.LogType | defcore",
    "keywords": "Enum Logger.LogType Type of log Namespace :Defcore.Distributed.Logging Assembly :cs.temp.dll.dll Syntax public enum LogType Fields Name Description MANAGER NODE"
  },
  "api/Defcore.Distributed.Network.AbstractReceiver.html": {
    "href": "api/Defcore.Distributed.Network.AbstractReceiver.html",
    "title": "Class AbstractReceiver | defcore",
    "keywords": "Class AbstractReceiver Provides the methods nessesary to be the receiving side of a proxy object. Inheritance System.Object NetworkSendReceive AbstractReceiver Inherited Members NetworkSendReceive.BufferSize NetworkSendReceive.ServerPort NetworkSendReceive.IOSleep NetworkSendReceive.ServerSleep NetworkSendReceive.Thread NetworkSendReceive.Proxy NetworkSendReceive.Start() NetworkSendReceive.Shutdown() NetworkSendReceive.Join() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Defcore.Distributed.Network Assembly :cs.temp.dll.dll Syntax public abstract class AbstractReceiver : NetworkSendReceive Fields DoneReceiving Declaration protected bool DoneReceiving Field Value Type Description System.Boolean Message Declaration protected string Message Field Value Type Description System.String Methods CreateDataReceivedEvent(String) Return a concrete DataReceivedEventArgs subclass, for handling receive events. Declaration public abstract DataReceivedEventArgs CreateDataReceivedEvent(string data) Parameters Type Name Description System.String data data from socket Returns Type Description DataReceivedEventArgs new DataRecivedEventArgs object type Remarks A subclass must be able to create and return a data received event object for its specific needs. HandleAdditionalReceiving(Object, DataReceivedEventArgs) Process received data in addition to simply sending it to the sender object. Declaration public abstract void HandleAdditionalReceiving(object sender, DataReceivedEventArgs e) Parameters Type Name Description System.Object sender event raiser DataReceivedEventArgs e data from receive event Remarks A subclass must implement any additional handling that they want done. when data is received. OnDataReceived(DataReceivedEventArgs) Raises the data received event. Declaration public virtual void OnDataReceived(DataReceivedEventArgs e) Parameters Type Name Description DataReceivedEventArgs e The data received Run() Method that does the actual receiving loop, reads in the data then raises an on data received event for listeners. Declaration public override void Run() Overrides NetworkSendReceive.Run() Events DataReceived The event for receiving data. Declaration public event EventHandler<DataReceivedEventArgs> DataReceived Event Type Type Description System.EventHandler < DataReceivedEventArgs > Remarks To use this without a delegate the DataReceivedEventArgs class was created."
  },
  "api/Defcore.Distributed.Network.DataReceivedEventArgs.html": {
    "href": "api/Defcore.Distributed.Network.DataReceivedEventArgs.html",
    "title": "Class DataReceivedEventArgs | defcore",
    "keywords": "Class DataReceivedEventArgs Event arguments class to hold info about the data received. Inheritance System.Object System.EventArgs DataReceivedEventArgs Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Defcore.Distributed.Network Assembly :cs.temp.dll.dll Syntax public abstract class DataReceivedEventArgs : EventArgs Remarks This should be subclassed depending on what kind of data is being received. Constructors DataReceivedEventArgs(String) Declaration protected DataReceivedEventArgs(string msg) Parameters Type Name Description System.String msg Fields Endl Declaration public const string Endl = \"end*\" Field Value Type Description System.String Split Declaration public const char Split = '|' Field Value Type Description System.Char Properties Args Declaration public string[] Args { get; } Property Value Type Description System.String [] Message Declaration public string Message { get; } Property Value Type Description System.String Methods ConstructMessage(String) Overloaded ConstructMessage for a single string Declaration public static string ConstructMessage(string arg) Parameters Type Name Description System.String arg the argument to pass Returns Type Description System.String a proper constructed message ConstructMessage(String[]) From a list of string arguments construct a message to pass along. Declaration public static string ConstructMessage(string[] args) Parameters Type Name Description System.String [] args arguments Returns Type Description System.String ParseMessage(String) Split incoming data on space. Declaration protected static string[] ParseMessage(string message) Parameters Type Name Description System.String message Returns Type Description System.String []"
  },
  "api/StartManager.html": {
    "href": "api/StartManager.html",
    "title": "Namespace StartManager | defcore",
    "keywords": "Namespace StartManager Classes StartManager Test"
  }
}